module experiment_4;

behavior Nqueens_Solver {
  static final long serialVersionUID = 3L;

  private final int DEFAULT_COMPUTING_LEVEL = 2;
  private long startTime, finalTime, total_run_time;
  private int COUNT;
  private int final_result;

  public Nqueens_Solver() {
COUNT = 1;
//    COUNT=0;
    final_result = -1;
    total_run_time = -1;
  }

  public void dummy() {}

  public long getTotalRuntime(){
      return total_run_time;
  }

  public int getCount() {
standardOutput<-println("**** TEST6 ****** TOTAL_RUN_TIME:" + total_run_time+" final_result:"+final_result+" COUNT:"+COUNT);
    return COUNT;
  }

  public boolean add(Object[] res) {
    for (int i=0;i<res.length;i++) {COUNT+=((Integer)res[i]).intValue();}
standardOutput<-println("**** TEST5 ****** TOTAL_RUN_TIME:" + total_run_time+" final_result:"+final_result+" COUNT:"+COUNT);

    return true;

  }

  void compute(Integer y, Integer left,Integer down,Integer right, Integer SIZE, Integer MASK) {
    this.Backtrack(y.intValue(),left.intValue(),down.intValue(),right.intValue(), SIZE.intValue(), MASK.intValue());
  }

  void Backtrack(int y, int left, int down, int right, int SIZE, int MASK)
  {
      int  bitmap, bit;

      if (y == SIZE) {
          COUNT++;
      } else {
          bitmap = MASK & ~(left | down | right);
          while (bitmap>0) {
              bit = -bitmap & bitmap;
              bitmap ^= bit;
              this.Backtrack(y+1, (left | bit)<<1, down | bit, (right | bit)>>1, SIZE, MASK);
          }
      }
  }

  int start_computation(Integer n_value, Integer no_workers) {
       return this.start_computation( n_value, no_workers, DEFAULT_COMPUTING_LEVEL);
  }

  int start_computation(Integer n_value, Integer no_workers, Integer computing_level) {
       startTime= System.currentTimeMillis(); 
       finalTime=-1;
       total_run_time=-1;        

	      Nqueens_Solver[] actors=new Nqueens_Solver[no_workers.intValue()];
	      for (int i=0; i<actors.length; i++) { actors[i]=new Nqueens_Solver(); }
		    int computingLevel= computing_level.intValue();
        int SIZE = n_value.intValue(); 
        int MASK = (1 << SIZE) - 1;
        
   join{     
//	      if (SIZE<6) { 
//            self<-compute(0,0,0,0,new Integer(SIZE),new Integer(MASK))@
//            self<-getCount()@
//            standardOutput<-println(token)@
//            set_final_result(token);                  
//        }else {
//            int down=0,left=0,right=0;
//		        int jdown=0,jleft=0,jright=0;
//    		    int bitmap = (MASK & ~(left | down | right));

//		        join{
//    		        while (bitmap>0) {
//		                int bit = -bitmap & bitmap;
//		                bitmap ^= bit;
//		                jdown=down | bit;
//		                jleft=(left | bit)<<1;
//		                jright=(right | bit)>>1;
//		                int jbitmap = MASK & ~(jleft | jdown | jright);

//		                int indexOfActors=0;
//		                while (jbitmap>0) {
//		                    bit = -jbitmap & jbitmap;
//		                    jbitmap ^= bit;
//		                    actors[indexOfActors % actors.length]<-Backtrack(new Integer(2), new Integer((jleft | bit)<<1), new Integer(jdown | bit), new Integer((jright | bit)>>1), new Integer(SIZE), new Integer(MASK));
//			                  indexOfActors++;
//		                } 
//		            }
//		        } @ 
		        join {
			          for (int i=0;i<actors.length;i++) {
			              actors[i]<-getCount();
			          }
		        } @
            self<-add(token) @
            self<-getCount()@
            self<-set_final_result(token)@
       standardOutput<-println("**** TEST1 ****** TOTAL_RUN_TIME:" + total_run_time+" final_result:"+final_result)@
            endTimer();

//        }

self<-set_final_result(final_result);

      } @
       self<-reflector(token)@
       standardOutput<-println(token)@
       standardOutput<-println("**** TEST2 ****** TOTAL_RUN_TIME:" + total_run_time+" final_result:"+final_result);
       return final_result;      
	}

  void endTimer(){
     finalTime = System.currentTimeMillis();
     total_run_time = finalTime - startTime;
     standardOutput<-println("**** TEST3 ****** TOTAL_RUN_TIME:" + total_run_time+" final_result:"+final_result);

  }

  int set_final_result(int result){
     join{
         final_result = result;
     } @
     standardOutput<-println("**** TEST4 ****** TOTAL_RUN_TIME:" + total_run_time+" final_result:"+final_result+ " result: "+result);     
     return final_result;
  }

  String reflector(Object[] res) {
    //for (int i=0;i<res.length;i++) {COUNT+=((Integer)res[i]).intValue();}
    return (String) res[0];
  }

  String reflector(Object res) {
    return (String) res;
  }

}
