node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/ToFloat"
  op: "Cast"
  input: "Placeholder"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Shape"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
          dim {
            size: 15
          }
        }
        tensor_content: "\233\344\313>\236\322\200\276n\326\205\276\335\314n>\n\355\035=ls\321>\246z\200\276\272\206~>Ny\227\276x\267r>\230\310\031\276gbx>\337\327\270>g\373\333>\303\224y>\222\272\265>\022\0177>1U\215>\373\251\201\276@ou\276\335\261\216\276\344d\242=\320\336\017=\266\257\013=\335\267J\276a\360\232>\300\337\301<\302\310n\276\205\031\003\2743d\310>\013o{>P\t~=@\212\263\275\316\376\243>\374:\262\275\256\330\025>A\013\205>\336\330=\276C\272\247>\316\020\337>&\"\262\276\013W*>\037\3015>P@\362>kF\014?\244\270\200\276\344\027o\276\024A\212=\256\230u=\351\212\267\276Z\340\241<\003\326P\276\334JJ<\217\r\212\276\016Gi\275\306\266<>\264GJ\276\313L\236>m\231}\276\014B\213\2768\260\027>\316\362v<\000\000\000\000sAu>2[D>\231i\260\276`\272\231\275\354\226\214\276\340]k\275\272&\210=F1\235\276Y/\264>\306\361C\276\020\005\243<\331\224\222\276\351u\013?\264D1\276\352\000[>:Zz>\270\233\017?s\354\037\276\000\000\000\000P\341\375\276\361\266\244\273V8\016?\252\327\246\276\031\3526\276\260\377\350>$\334\223=\022\352\t?\345s\353=?j\225>\257\323\237>0\355\'?\326\210\003>#O0?\024\004x\276P_\374\276\240\340\274\275\026\376\333\274\034 \316=\343\254\340>4t\033?8+\222<>U\014?\222\326\322>\301\351\207>\000\000\000\000#\372@\276\207\377}>\243\323<>F\027\017>-\210\301\276\376o\335\275\000.\352>\206\2060>\273\257\236>\250G\325>\005\t\236>N\347\t?S\250\262>\000\000\000\000\000\000\000\000<c2>\360\357\276>6\226}\275\374X\314\275\035\224\262\276\304\214\366\273\215\376\345>^\372X>\3525\307>\275\241\031>R\376N=\234~\216>\030z\302=\000\000\000\000\000\000\000\000\025\365\343\275 \342\365>\353\001\202\276\314^\211\276\256^\266\276\261\226m\275\217C\270;\001/\177\2758pd\275\214,\363=\220}E>x>q>\032\264\010?|~u\276\000\000\000\000\323\354\t\276d\215_>x\002\371>\367YT=X\332\352=1>\232\276d}\271>y\013\021\276\377\262\260>i_\216>\354\227N=\026t\212>\211U\345>\306y\000\276{\226\333\274G\034G?\342^F?\335\315\035?\350q\347\275\322HH\277\332\007\004\276\261\275T?\202\261h>y\321\002?o.\212>\310\306\254>QD\\?\002)\311\275\"\346g>sA\215>\317\000@\277\200E\255\276z\276\311\275j\310\035>\022\263\354=\231\333\002=E\2012\277|J-<\261\303N\276\n\255\t\277Po6\276\006\305\326\276\304\327\300=*`A>\236\036\033>\366\013\211\276\000\000\000\000\000\000\000\0005\310<\276\000\000\000\000\037\232\004=\000\000\000\000.\331>>\260!\016\275V\3062>\036W:=\000\000\000\000\000\000\000\000\232Z$\276\001\253*<^\032\037> \232\315\275\022\336r=\352\010\020>\217h\231\276\270\373\226\276\316Js>C\275\"\276\326\014[>\000\000\000\000G\026\215>r;\003>\3703\253\275\356[^\276\324\373\351=\313\217\006\276*PV>\245]\244>\351A\207>\000\000\000\000\000\000\000\000\363\274\224\276\267\215\037<\364\014\234=?<\'\2764\375-\276\210\252\000\275\201<\244>\316\263\013><\263\360\275<\212\254=\215;\234>\333\347p=\362\307\371\275\376\362\016>\033H\250\276\032fF>\3126\241\276R\024q>\232\016\005>\000\000\000\000l\016}\276&UR\276\357\271$\275\000\000\000\000\304\233\336=\000\000\000\000\000\000\000\000\004\215\330=Lv\031\276\177\330%=8.\312<Y\3779\276\322\336\030>\343j\261>\322!\002>\261x&\276\000\000\000\000\\\213\250=\306\n\n>\340y\275\275\324]\210=\372\226\245\276\000\000\000\000\333R\222>T\277l\276\201\366\023\276\002t\023>\032\277\030=\000\000\000\000\025S\010\276\000\000\000\000\374\000\240\276\360S\263\275J\231\014>\346e\373\275\224\353\300=~\267L>\314\273T\276\032# >Y\245\234>\000\000\000\000>\004\237\276\034,\204\275\360\240\223\276\252=\327\275\211:\247>~\265\246\276>\310\">\365\2134\276n\234\034>\027n\236>\014\337\352=\244\214\310\275\336\370\001>\203\033\027\276\323\313\247\274\013J\344<\270P\024\275L\221\204\275\\\215\232\276\000\000\000\000\010\306\224\275\276\374*>F\240l\276\027\350\377\274\212\213U\276\000\000\000\000\314\026\200\275K\215\205;J\316\026\276\371p\030\276\300o\230\276\234Q\223\276\250\323\321\275\355\236\216\276&Mr>\344\006\255=\204a\037\276t\330\222=\366r=\275\000\000\000\0002\214f>)#\201>5\300\202>q\324\014\276\244\225\307\275\256\230<>\022eg>\232\234P\275\256:\312\275F*\n>\000\000\000\000\304\355\351=\263h\236>\000\000\000\000K\260\234\276\000\000\000\000\"\234\024=\274\372\324=\177\241<=\340\010\200\276\224\343\223=\316N\\>X\"\233\275^\235\000>\013\205\206>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
        }
        tensor_content: "\274g\333>\000\000\000\000\000\000\000\000%T\324>\364$\347>\217q\355>\000\000\000\000\027\352\315\276\000\000\000\000\307\264\341>\000\000\000\000\222v\336>\366c\334>\367-\302>Y \350>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
          dim {
            size: 20
          }
        }
        tensor_content: "_\t{\276\314x\342\274(\035\320=_$D\276\240\275\224\276\034\364\310>\341\312\222>\334\205~=T\250\246=\215\227\003<\315\271\254\276%\224n>\207\367\020<\007\222\354>\352\325U\275\304\357\267=\223\373U\275\264\207\274\276 \031\310<\350E|>p%\237\276\334\000\275\276\000\000\000\000\232Wz>\022\301K\276X\0371\276q\333+\276\004\026\235\276\000\000\000\000\000\000\000\000\340\035\244\275\010\300\256\275\322\313I>H\371\327\275l\033\316=\330^\222<\356\213[\275\233\346\260>\000\000\000\000\025\321\215>\310\216\241\276b8e>\305IN\276\373\370\205>\242\363\227\276\312^A>7\005\245>w\210\256\276\336\362\036>.r\004\276\3131\375\274\226\\O\276\213\304\243>[\260\241\274r\322U>\230\010\250\276\336r\334\274\000\000\000\000\255\3242\276\000\000\000\000xX\201\276\225A\272>z\035\273>\000\000\000\000*5\254\276\253.%\276\0145\205=\360\272Z\275L\373%>\242G\025\276\332\316\t>\000\326!>+\236\252=\266\250,\276\344\235m\276\266\014+>\354\253[\276\200\333\242\275P\236\250\275\311q\255\276\024/\006?\235+\336>g\t>\275\212\023\024>\000\000\000\000\024K\245>\315T\354>\351\316\224\276\352\034\014?\007/H\276\306\363U>IA\374>lF\235>\234%\345<\237\313\264>lL\341\275\025\243P\276r\343\264\276*lO\273\365Y\310=\202\235\341>\300?\227=\344\376I=l\033\241\276\010\326$=|\244\267>\3616)\276\253Z\257>\365A\370\275\301\371\236\2744\306\375\275y\036\014>,\202\316\276M@\002=\374\375\030\275\352\261C>\306\342Y\274\204\352`\276\323\257\245\276\037@\263>,\031e\276\354\375m\276\000\000\000\000\313v.\276\004_\240=\227\227\265>4\350\207=\234\351\016\276.\264b>\370C\210\276eX\242>\022\006\026>$\033\271=0\367\250\276\237+\223>^2L>\354\t\204=*\332D>T$\352=\327\035\232><@\003\277\2120\374\276\024L\202>\205\013\257>\343\3759\275Z\001(=\346\256\000>\013+\214>\267\370/\274\006t2>Y\226\203\276\026\331\001\277/\262\305>\337\222\250\274\204T\336=\301\021\261\276,A\244=r\267\374\273\000\000\000\0003\231\007\276\000\000\000\000\034\330\356=\342\t\273\276\000\000\000\000\000\000\000\000\016\207Y>\244NY\276J{i>N@\n>~\227k>H\246\n\276\203\312\246>\326\016Z\276\000\000\000\000mD\037=\002\326\014>5\221\271>\274\257\324=\252\2365>\216\211\365\275DI\255>Z\371\212=\234\225\241>OS\255>p\265\231\276|\217 \276\021\030[>\364\221y\276}f\265=\317\024\212>\006\360\271\276\032\351\353>\252\2129\276\335)\245>\000\000\000\000\361\030\213>im\232>\222\317\222\276(\224\001=\344g<>\252\201\025\274\n\266\206\276&td>O\336\222>>P}>yuI\276\000\000\000\000u[\204>\215\037\207>\3421\005\276\354\275u\276%\203\203>j\321`>j\242\220;\370\332\233\276F\3060\276\"\202P>m,\244\276\206\020>\271\277Un<\2313\002?\370n\037>\336\245\r\276\301\327\345\274F\014}>\024\252\203>\013\372k>\216\237\231\276\323\230\236>\000\000\000\000IF9\276n\330\344=4\252a\276\351\200\326>\334/\203\276\310\236\231\276\233\237\262>\254\373e\276\376x&>\333\343\000>\265\230\005>yP\205=\257\270\344>l9\260\276\324U\223<\334\251\201>\203\0247>\202\316l>\331\376\005=\204o\216\2762o\247\276\3002\371;>\347\013>l\257\r\276\356r/\272r\335t\275\000\000\000\000$e\210=\365\n\033\276\326\337a>9O\351>3\240\363>\372\303f\276Q\010H\276\266\372\t>\214K\303><\305D= \022\271\276q\304\342>\006`\022>U\305\254>\'7\226\276\244~\";{?\271=x\225\271\275\010\331j\276\246\000\272\276\262\345>>\370\032b\276^\3203\276\356W8\276[\344{>\337~:>\352Z^\276\006D\033>#%\306>j\265\312>\356\310E\276\220\3046>\365L\207\276\321\250p=i\345\352>\001\3140>E\317\272\275\365\010\270\2762\002O\276\000\000\000\000x\307\264\275\335\371\210>Dw\203\273"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\305\\\330>\244>\332>\274`\334>\000\000\000\000\000\000\000\000nY\302>\314\262\317>\000\000\000\000dn\271>\000\000\000\000\000\000\000\000\251\n\335>\240` \274U\014\315>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\220\347\310>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 15
          }
        }
        tensor_content: "\223\214\227=S\314\200={\333\315\276\"wu>h\227s\276D\356\t\276\365\014N>x\366v>\000\000\000\000h?[>\002\200D\274\202\021\326>[\177\243>\363uX>\332\345\260>QY\027\276L\316m\276\300?M\276#\350\035\276\364uW=\210fg\276\007B\n\276c\372\202\276\261\235*\276^\264`\2769\275\377=La\355>p\270\353\275\236\273\346>\022\345\020>zy2=\243%U\276~\363(\276o}\003\275\350\"\240\276\212\366\270\276\373E\214\276z\324<>\320y\253\276\267\367\361>tSr=\207C\330=R\303p=a\375\230>3\026\322>\257\236\036\276\366\202\006>~\210e>\233\312\260\276\313\366\236\276\000\000\000\000\325eL\276.\332D>5\374\032\276?\342\252>\006\325+\276\241\342\264\276\343!?=\"$C\276\360)\244\275\262I4>1\211\210\276\266\275}>Fb*>B{\021>}\027\240\273\366\346L>\3527\023\276\334\377\263=\240_\202\2752\2773>\320\323c\276y\355==\265\024\222>\376f\037=m\344\212>\244\274\203>Q\340M>\233P\360=H7Q>|\276\263\275\203\331\371<\346\326G\274\361BO\276b\347\014>\002D\362=)\345\376>i8\240\276\3123\213\276\330\322\264\275\352\372*>\352\345\275>\200\030\251<\260\314\252<\037g\026\275\000\000\000\000\234\373\264\276\251Z\255\272\222\021\203\276#\237\336\275\230\350\032\274\342\231\001?\303\223\007\276\277\340\257>\306\361\266>\234\334\215=\026\251Z>\003\n\271\276\345\231\206<\320!.\276\255\000\243>\245\253\013\276\004\366\322\275\365\247\216\276\350\351\346\275Gt\262>\035c\232\276N\327q>|\273c\276\001\375\\\275\267L\001>\311\327\023\276\352\320\246\276\357Ew\276\366\005\277\276\324C\241=W#\273>\340\\Y>\007K\365\273\361jD>\243(\261\276\t},\275\000\000\000\000\225\333\303>\216\243r>\177C\233\276\000\000\000\000{\371\205>\267\372P\274\000\000\000\000b?-\276\361@\206>U\213\202\276\000\000\000\000\255\374\231>Hvj\276:\222O>M\337\252\276\303\206\202>\202\\\035> /y\276\0026D\275\000\000\000\000|L\207=`\227\343\275\214!\332\275\277m\210>\343x\252>:\274\035<\214\021\243=\200I\211\276\304xE=\235\237\203\276\215N\234>X)\251<?\366\236\276w\243K\276\003\031\321>\014\257 \276K\023\n\276\000\000\000\000\360y$\271\232u\020\276\000\000\000\000s\035\374>+6\253>\030f\014?\354\376\275=\225\350 >\261\264\330=a\330\030>\260\350\017:\000\000\000\000\366\257\270>\311\217\200\276Dc\213=\371R\261>\256\230\003\276\354\345\343=K\340\202>\322t{>\377\327\246>\323\025$\276\354\252)>\360\345k\275\00086\274\014\263\253\276\251\313\301\276*\226\'\276s\227\247\273\244N\375=I\314\370\275t\303B\276r\201\r>\204\367\351>\006-\032=\311\231\331>\000\000\000\000\330\277\244\274\220\024\232\276\"v9>\035\237\350<\264\213\361=9\227\261<\227\252\200>\210\006\212\274Nu\014\276\031\357\363\274\004>\205:\017\002\027\276[q\271>\000\000\000\000\227TQ<$2\353\275\000\000\000\000\236\256<>\322h@>\262\326%\276\214\333\206=Tg\310\272/\020\247>_\234\264\276\314\033\206=\003\034\245>4~\200\275\225L\260>V-Q\275\210a\341\275\227\244\256>4\250\213\275\344*c\276\016\222G>\000\000\000\000\351\235\244\276\241\304\273>u\377\207>\020ly\276Dx\207\275\254}\340=\357\266\246>h\030c=\031\226\347\274G\207\221\276\014\036\307=\322|\376:\000\000\000\000\000\000\000\000.\274(\275\014\016\376=o\257\t\276\234`\350<\022\350U>\334\300\342=}\225\240;#R\265>\250\331\005=\267,\236\276\307\243\200>a\016\257>\222\241d>DH\222\275\237!1\275V@\226\276%J\204>\224S\326\275\365\373\212>l\237S\276\031*\370\274@\241p\2767\035\007\276\262\0213>Z\3165\276\272\013T>\327f\246>4k\357=T\262\374\276\372}\230>\033\326\226=\215L\261>\351/C>Y!P\274d7\342\274\234j\022\276\243\216\221>0\362\324>U,\353>\227\365\302\275.\036d>\223\365L\275\222\270\300>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
        }
        tensor_content: "\025\213\333\276\217\325\252\276\254&!<j\246\200\274\261\236\031\274\000\000\000\000\347=#\2747\026\260\273\000\000\000\000{\311\320>\367\334\316>4\026\305>\000\000\000\000\033\336\311>H\341\316>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_2/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_2/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_2/MatMul"
  input: "dnn/hiddenlayer_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/kernel/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
        tensor_content: "F\\\217>*x\342\275\360]\005>L\266j>\217\333\235\276\262n\213<\314\336\234\276A\326Y\276\350\271p\276G\231\002\276\257{\231=\320\356\034>Fq\373\275\206\217d\2760\337\324=,J\234=\336\264\261\276\333s\350=\373?:\276\200\t\203\276\032V\222\276,\034\321\275>\244\271\275C\334s>\243\277\215\276z4\212\276\320\312\001>t\236h\276\251B\017>\262\255\032\276\372\217\262\276.&\232\275v{]\276\222=W\273\2314l\276\272\204c\276\244\303\237\275\006^\263\276,\367\375\275\273\210G>4\225\227\275\000\003\370\275\217\031\234\276b\313g=\343\352\235\276\360\310\r\276\261\331T\276\213\310\354=\214\261\235\276\023\275\021\276j\177\227\276\245Z\017\276\275.3\276\r#{>\024\026\252>\242\240\t\276 \252\212=\024\007_\276\221E\300=\364\375\300\276\3048\260=\234=E\276\3541\213:\271\313\026\276\244\355\226>n\037\034\276\225\266\023=t\212s>\340\203\311=\200Pr>\355O\370\273\234E>>\024O\210=\277\311Y\276\035t\032\276\375\264c\275H\023q>\010\305E\276\000\000\000\000\364q\211\274\241\025\007\276\000\000\000\000\021mI\276\000\000\000\000\271\317\201>\030?R>\321u\366\274\266f\222>\0209\017>\200\035\223=1\304\220>\340v\217\276\220\237\005>\354\000\202>\250\235\217=.\000\256\275\354\376;\276\000\000\000\000\274\367\200\276\253\024\330\275op\205>\000!6>\306\220\234\276g\230Z\275\234\216(=d&)\274\232\261<>\3636\374=\345\303M\276%\332\033>\311\200\231\2760\265\216=|g\023>^\256\024>P\035\265\275(\332\357\275\000\000\000\000\260A{\276\211\221w>\271\020\324=\214\312\231\276Zc\206>\217=\235\276\022\227\256\274`\374}\275-\342B\276)\005\224=|\"\227\276Nc\255\275 \341f\276\334\'\263\276\000\000\000\000}y\361\275Pl\204>\\:\031\276q\372\"\275\223V\033\2768\347]=D=\234=\374X >^j\013\274\200\030)>\030j\314=NJ\363=zG\272>\357\354\237\275\340T\213=#\030[=\034\024\261\276\230\353\207\276t\355\025>\320\356\351=\\Q\'>\256\210\203>\260S\233>\035\014\201\276\357e\227\276<o\214\275\002(\260\275\271\212\201<tt0>,\357\230>\000\000\000\000\025\321\036\276\007\030+\276\000\000\000\000\254\251H>\231\317\206\276\244\256^\276\266\201\240>\336\377w\276a\212R\275\024X\235>\300\233\325=\210\302\021>I\334;=\371\2244=\000\000\000\000\210\000\033>\325\201A\274\321\345e>\361H+\275\372\ns\276\322\337\366\274\272\315\211>\322s2\274\323x\210\276\330E\347\274\322\r\010=.\244\254\276\322\200\016\275\212\311h\276-B\031<V%\242>w\227\240<\205h@=\000\000\000\000\257\351\201>u\021\240\274\3409|>t\262E\276\354\374f\276\345o0\276\352b\203>\351\263\235\276\256\030\241>\337\252\204\276>-\266\273\312K\344\274|?\002<d\255\247=Do\236\275\034\027\\>\265\305\346\275\2100\226>%CX=\335\227\222;\214\267\242>\004\343\223>F>\201>j\2251>\000\000\000\000G\236W\276;\333\372\275Cv\017\275\000\000\000\000\n\037\245=\260.t\276\337\220\032\276q\005\325=\223H\000;\373^6\2764\014%>\264\034\247\276,\277\237:\203\022\007>\000#\237>\001!\356\274$\352\345<\014\243\201\2765[\r\276\"O\357\275\3123\225>.\203A\276\306\264b\276\350e\275\275\010\314>\275\016\312\237>\223J&\275\222b\215>\264\306\251=4b\227\275\010\337\342=\226\315\311\274\225;\217\276\000\000\000\000\240\207b>\000\000\000\000\360\214D>\227\212?\276\000\000\000\000\307\021\242\276\000\371\005>\304 #>\024\366#\276\332=\242\275\370\030\234=\020\306G>X= >\024\261\376\275y\030\320=\360\202\205=\364X\217>*\024#>\214\336k<,<\203\276\376c\255>\002\2443\276*@7\276 6e\276\240\315\212\275H\033\244>QP\262>t\307\217\276\255\350\321\273Li\240>\266\326\271>V\350\023=L\343\030>\336\234\217>\312\322\275>t\210A>\300$\005>\227\201\225>\226\350H<1#\254=\240K7>\343\337\034\276@9\035>\323\270M>\004\321\220>\260\357\010\275h\236\314=\352\272\002>\242N\247>tnl>\245\365\021>\341\331\244\274\266\230^\276\366\257k\275\211\305j>,\304\211\275\316t4>S\215\362=V\214\232>=a =Xe\254>B\316G\276\000F\241>\335\335F>+*\312>\356\353\250\2750F.>C\016\211\274\321n\211=\013\220\251\275\r\037\033\276\272_\236>\313\010\216>\305$\265\2767\233p\276\346\310>\276\245\342\t\276\3500p>\023^\265\274\000\000\000\000)\025\337>\261\241\232\275\276\t\232\274F\240\260\275\355\361\350>\214\361\237\276U\006\334>\023\312\316=\325\272\243\276\210\031`\276K\\\322<c\311\377\275\256\232\231\276K\247\342>f\006\261>\000\000\000\000y\277\214\276m\261\211=\327)\224>\307\203\327>z\002M\276\034\216\251=\235\304\332>\031*G=\232s,\276:\303\211>\333*\032\276$\352l\276\354(\345\275\266MF\276\334%]\276\304\214`\276\207\243\235\273\000\000\000\000\377\240Y\275\000\000\000\000G\245\212\276\274\365\205>6\003\231\276\000\000\000\000RU\203\276\004\025\205\272\034`b>\"k\240>\256b\211\276:\242Y\276Vd\336\275\360\303\n\276\337\017=\276\000\000\000\000\310\334\206>\270c\027=\321os\273\000\000\000\000/\317\326=% \033\276\030\325\226;\203t\207\275\260\2303>\\\025+>\255\343\352>\337>M>\017\023-\275\310\260\223>\t\t\371>\000\000\000\000o\355\236>N&\026>\027\2109\275\366\301R\276\255=\246>\317!\036\2762\207\377\275ag\240>t\210\201>@P\220\276\264\r\032\275T\022\313\273\326\327\313>\207\323\325>.\263\373\275\006\223_\276\342Z~\275k\351\205\275\254f\020>\320\234\305==\351\206\276\314]\013>\032\000\n\276\000\000\000\000\330\272\000?\307\365>>e)V\275\315\2026>:\303\216>\276%\371\275\032\033\360>$\320?:t\010\305<\374\3015>u\021\336>\345Cv>\014~\255=\316\010\010\275/\345a>\2004\223\276\000\000\000\000yf\252>0\007\'\276\300x\037>\177\371,=T\270\202<\240=\022\2765\254[>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_3/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/kernel/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/bias/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "\223\300\026\275\000\000\000\000\000\000\000\000rR\260>/7\374>\000\000\000\000\001\206\300>u\315O\275\000\000\000\000=\225\025\275\353\350\260>\000\000\000\000b\277\255>\354\261\223\276\000\000\000\000\000\000\000\000 V\270>\327\342y<\000\000\000\000W\341\317>\265\246\265>\000\000\000\000\000\000\000\000\271G\271>]\003\257>\311\251\314>\000\000\000\000\000\000\000\000q\240\273>_\204\221\276"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_3/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/bias/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_3/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/Relu"
  input: "dnn/hiddenlayer_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_3/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_3/MatMul"
  input: "dnn/hiddenlayer_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
        tensor_content: "j?\256\276\000\000\000\000\371\201\224\276C\366\242>\026-!>\230R\273=\017\221J> \317&\276\021O\273\276\303\343H\276\034[\260>\206B\264>\262\241\373>\204(t\276\010[\220=\370\337@>Z\300\310>\303\321>><yp<\244G\024>\r\020\315>0<{>\217\322K\27670M>\203\331\t?W\322\010>\004\377.>66\230\276\205\007\247=s\037\244\275"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.32059112191200256
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_3/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
library {
  function {
    signature {
      name: "_make_dataset_811ccca6"
      output_arg {
        name: "RepeatDataset"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 20
              }
              dim {
                size: 24
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 20
              }
            }
            tensor_content: "\000\000\000\000\000\200C@\000\000\000\000\000 h@\000\000\000\000\000\300p@\000\000\000\000\000`f@\000\000\000\000\000\000i@\000\000\000\000\000\200Z@\000\000\000\000\000\360w@\000\000\000\000\000\300b@\000\000\000\000\000\300]@\000\000\000\000\000\340d@\000\000\000\000\000`f@\000\000\000\000\000 b@\000\000\000\000\000`l@\000\000\000\000\000\200V@\000\000\000\000\000\000V@\000\000\000\000\000 o@\000\000\000\000\000`d@\000\000\000\000\000@]@\000\000\000\000\000`k@\000\000\000\000\000\000N@"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "TensorSliceDataset/tensors/component_0:output:0"
      input: "TensorSliceDataset/tensors/component_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 24
              }
            }
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 20
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "TensorSliceDataset:handle:0"
      input: "ShuffleDataset/buffer_size:output:0"
      input: "ShuffleDataset/seed:output:0"
      input: "ShuffleDataset/seed2:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 24
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "BatchDataset/batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 5
          }
        }
      }
    }
    node_def {
      name: "BatchDataset"
      op: "BatchDataset"
      input: "ShuffleDataset:handle:0"
      input: "BatchDataset/batch_size:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 24
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "BatchDataset:handle:0"
      input: "RepeatDataset/count:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 24
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    ret {
      key: "RepeatDataset"
      value: "RepeatDataset:handle:0"
    }
  }
}
versions {
}
