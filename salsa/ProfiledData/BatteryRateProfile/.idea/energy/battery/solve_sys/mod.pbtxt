node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_B0J2GhZzZlw"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/ToFloat"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Shape"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/examples.nqueens.Nqueens/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
          dim {
            size: 15
          }
        }
        tensor_content: "\332\256\334>\016@\224\276\336C\231\276\360D\214>i\370\226=\246\353\342>\026\350\223\276\025\310.>\276\346\252\276\031\305\212>x\243@\276C)\215><.\312>!\366\352>X\007\217>\231\034\300>\362\351]>\241\302\240>\332\005i\276\217\020_\276\266\342\203\276\244\032\360=cp\222\275\\\217\223=\272\0325\276\321]\256>\32635=\346kY\276\331\234#<\271\256\323>\342\253%>p\272\314=\000\240\000\276\344\263d>\247\2225\276\265\026t=\261x\230>n%\200\275\263\'\273>\2015\262>\226\217\305\276\010\327\246=J\264\272=\367\312\314>\214\377\351>\271\242S\276b\371\212\276\324\366\327=V\206\351=;\342\236\276\226P\207=\343\260w\276\221@\021\276\377z\235\276+W&\274\246\221c>C\304\033\276R\316\265>\022=U\276\375\364d\276\220|Z>\350+Y=Ly\200;\220r\242>\275\024\206>L\333\215\276 p\347\275\023\220\306\276\000e\303\275\025\334\t>\266\236\260\276T\022\326>T\246\376\275\'\337\236=\025\374\\\276\261:\371>\224\037X\276\345\355\200>>\3465>L3\377>\224J]\276\3703\027\275K\025\307\276\270\0050\275(L\375>\032E\272\276\3103s\276Ms\312>E\243\257<b\247\363>\373\217(\275\257\327\250>\037A\263>\217\267\361>\352\006$\275\177\355\006?zo\217\276@_\212\2760K\005\276\376\350B\276\356\352\r>=\220\217>\305\231\344>h\221\363\275\222\335\301>\207\246\276>1W\233>\000\000\000\000\013Zn\276\245uR>\246\004\023>&\3625>\367g\233\276\337\222\025\276x\r\325>faW>e:\212>\030s\300>2\204\214>\211\345\375>\020\233\231>\330U\302\274\261\236\373<_\023\362=#\323\243>\023\231\346\275^\007\r\276%a\232\276\220@:\275V\266\313>>\325\177>\363\313\255>\001\341\313=\335J\006<\027lf>*\204\303=\274J\330\272\210K\204\274-\375\335\275\3303\366>,\251\201\276<\314\234\276\334\212\320\276`\201\304\275\213\356\310;DM\315\2757?b\275\276N\364=\377\007F>\007\362q>{\246\351>\256,\216\276\331x\367;G\333e\276TA\n>]\347\317>d\343\267=F\215B>\241\253\255\276\005\007\220>Y\3467\276-w\210>\027\005K>\214R\222\274\204\014?>@J\010>\246T\'\276p\235\204\275\325\301\317>\037\022\337>\310\270\224>\324\223\032\276\377`Y\276\272\342*\276\265t\000?1\306\207>d1D>`Y^\275\036\214v=\231\336\004?\206\257\025>\201`\207>\343\256\240>s*\357\276\345\267\233\275\036\"\035>J\243D>\207\360\241\276p%\217=\370\034\342\276\260\301F=\357F==&!\223\276\303\366\032=e\n \276\302F\007>\n;h>~\371A>fy\234\276\0005\214\273\016\030\360\274\025\243c\276\330\224\355\274\254\004\220=\000\000\000\000\016\264e>P\310\224\2756\241Y>\\\342\252=\000\000\000\000h\230\025=z5K\276\320\031F=>\365E>\360\247\r\276\374$\307=\312\3436>\377\325\254\276(i\252\276\327\022\215>#\230I\276\333\363\200>\3129\026;\267\203\240>R\026*>\270\351\370\275g\233\202\276\312\330\033>\253j-\276\n+}>\025\313\267>Y\257\232>H{\221<H1\240\274c*\250\276xRC=\264\302\351=\037\027N\276\024\330T\276\360\014\216\275\361\251\267>\256\2162>~4\037\276\374?\372=\375\250\257>\350)\306=\331\276#\276\336\3155>\213\265\273\276\372@m>:\244\264\276\231\367\213>z\351+>Z-\264\273\246\364\221\276\0060y\276\030\024\240\275e\353\345\274\302(\026>Kx}\274&j\3139b!\023>,Q@\276\\\243\240=pC\200=9\332`\276\262\271?>S\330\304>\262\374(>\221SM\276\310\221\013<\034A\366=\246\3450>\320\227\005\276\224\023\326=j\004\271\276\000\000\000\000K\300\245>\032\315\211\276a\321:\276\342N:>\334\026\232=\241On;\365-/\276\370\271\251<ln\263\276\330\204\000\276*t3>\323\215$\276\252P\007>^\222s>\254\226{\276\372\375F>\311\022\260>~\311#<\256q\262\276\334\341\321\275`\016\247\276\265y\022\276\371\247\272>\356\"\272\276\036\243I>\325f[\276NwC>\207\333\261>fJ\034>2!\013\276\276\323(>c\366=\276oUo\275L\312\206=\274\337\227\275\014G\322\275\314\372\255\276(\204\234<\310{\342\275\236\327Q>\223\275\211\276\264\261\215\275jf|\276\000\000\000\000\214\314\315\275x ,=*\251=\276\331K?\2760\335\253\276\014\277\246\276\264\304\017\276]\014\242\276\003\224\214>\244\274\372=d<F\2764\216\340=<p\254\275,\033T\273\211\263\206>\231\220\224>\245-\226>Q\2573\276\262\245\n\276\216sc>\371\037\207>\304\004\266\2757\370\013\276&\0051>+\365\364\274\302\321\033>#\326\261>\205\314\206\273\273\035\260\276\010\010\270<p\005\230=>X\021>\204\007\254=Pv\223\276T\231\341=\327\224\201>\030\330\350\275>x\'>{\362\231>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
        }
        tensor_content: "0iM>\000\000\000\000\000\000\000\000at\021>\tXR>\332\377g>\000\000\000\000$>\230\274\000\000\000\000\366\241O>\000\000\000\000\346\262P>\360\212G>^89>:\322Q>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\304qo\276\222\313\177\274\212\312\347=?\377j\276\020+\250\276\263\\\316>ki\230>\264\370\314=\245\236\276=\340T<==\'\300\276;\315z>g&\021<\021s\362>X\241\270\275\302\322\002>,\264\270\275$\365\317\276T|\177=\236>\204>\340\222\262\276Ln\320\276\210\332\257<=\231\220>\362\233r\2768\372W\276Q\266R\276t\203\260\276\230V\266;p\302\020\275\240\323\361\275\310u\374\275\262\246p>\204\327\022\276\226\350\r>\310\236d=D|\273\275\013T\304>\3107\307\274\205>\241>8\374\264\276\241\t\206>\245$u\276kf\231>\022a\253\276\2529h>\247r\270>\347\365\301\276\276\315E>\016M+\276$\004\215\275v7v\276\3731\267>\247Gl\275R\255|>\010v\273\276\210\324\204\275x\231\256\274\215\257Y\276\3304\244\274\017\370\206\276\244N\264>Mu\265>\350S\225<\232\242\277\2762\030.\276\366c^=\310\023\273\275@\351\033>\202\"<\276\272\2510>s\247\025>\213\247\252=\356}7\276b<\212\276\226\347Q>fC\201\276@\221\360\275\020T\366\275Sp\263\276\002\264\367>DR\310>mq\262\275j\356:>\360\270\337;\267\300\223>y$\330>Y<\250\276$R\002?\347\to\276\246\316|>L%\346>\234p\235>M/A\274\0179\310>\026\201\027\276\365}w\276\342P\310\276\210e(\275h\223b=R\247\342>i\252\233=\326\270R=\334\210\264\276$\"\240=\\\371\270>\027:\'\276\033\310\302>!\257\362\275U\354j\275\372\275%\276s\'\016>,\202\316\276]\224\013=L6\232\275\312\214j>\330\347Q\275\262\342\203\276C\035\271\276\336N\264>\006\372\205\276fl\212\276\215\334+<\253QU\276\304\024\356=\007\005\311>\364\235\325=|\3045\276\207\307\204>h\261\233\276\325\305\265>\362\340<>rh\003>\240d\274\276\017\231\246>>\rs>\254\277\321=\n\265k>\n\355\033>G\213\255>6\006\264\276\004\257\245\276\354\375\325>\365x\302>\300\265\252\275j\003=>\346\327\220>{\230\237>\"M\025>\346NY>\311\003\227\276%\203\254\276\337\266\305>\304\301\r>\"\005\026>1\177\304\276\354\366\361=\350\005;\275Hm\250\274\267J\035=\200\267w\274\356F\036>Rw\316\276\260\230\003\275\210u\001<\3670\200>\302\024\200\276\025+\210>.\0331>/9\211>(\2011\276\3637\272>\333t\200\276\260\225\225:lY\235=\342\2603>\245\376\314>\2762\021>\212y\\>\247\237!\276\214\351\253>\355>\205=g>\240>\277\300\300>\340\"\255\27667\"\276\010XX>j6\220\276=\266\261=?\202\235>v]\315\276v^\352>Z\2179\276\001\366\243>X\360\253\274a\206\236>\331\332\255>\002=\246\276\274\201\216=\205j9>p\317@\275z#\232\276\203\247\205>\277K\246>\217\025\222>YPp\276\330\344\003=\345\310\227>\375\214\232>\302\014,\276fL\216\276\225\360\226>%\326\203> \203-=hH\257\276&\241W\276\002]w>\335\231\267\276\270,\034\275\240\004W=\334|\002?\316\254 >\346d\014\276\270-\207\275\223\363\221>\036\220\204>Q\tm>\376\014\255\276\255\215\237>\274\267u\274)!`\276\277\364\346=\344\256a\276`9\327>L\235\226\2768\014\255\276\013\r\306>Fk\206\276\336SM>,\003\002>\340\246\004>\205x\203=+J\344>\334\246\303\276H\032e=\311\223\201>\326\0216>\261\324\211>^s\005=\364\334\241\276\242\334\272\276\230H\325;\356\353\013>SM\016\276x,\036\275\244$\310\2758s\r=\344\032\326=\325\345A\276\332\321`>Jq\364>\ri\377>\350\033P\2761\343n\276\226\3250>\277o\315>^\304\215=\220\177\314\276\006\354\355>\346:9>\3052\300>\351o\212\276\324>#;n\317\345=\234\245\003\276\364\331\210\276\026n\315\276\222\300e>\354z\204\276\370N\034\276\021\325L\276\317[f>?\331%>\345\232\202\276\346\036B>\234o\275>U\243\300>\316\243l\276{\271#>e\272\232\276d\n\306=\301\363\337>\261\3200>\200\234\342\275ev\313\276\022\335u\276\013\035;\274\234>\001\276Mg\234>\245v\316\274"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\007\323F>\204\231=>\240\222K>\000\000\000\000\000\000\000\000\254\0175>v\205:>\000\000\000\000r@\021>\000\000\000\000\000\000\000\000\360/A>\000X#\274\355V4>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\321\350\027>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 15
          }
        }
        tensor_content: "\332\272\264=\n\333\236=\233B\316\2762\205u>$9\215\276$\3110\276\345VP>\331\312\211>\235\275#\274\221\347Q>\215:\262\274\035P\321>\313\354\266>S\317N>7A\254>\030\212\003\276\262\302X\276\320MM\276\323\354\035\276\244[X=\264 \207\276\007B\n\276\244\016\220\276\221xQ\276\025<n\276\003\271\342=v\207\346>\030\267\034\276?\303\337>\001\\\003>\274\304?=\213FU\276>\006)\276\217\231\003\275hH\240\276\372c\314\276\373E\214\276\316\303Y>@\347\276\276@N\361>\364\236m=\330a\325=\244\027\306=?N\230>\t}\321>\217yE\276\326]->\2571\206>\0138\304\276;d\262\276\306\003{\274\265@s\276\016\265k>\025\327A\276\257O\276>\346\257R\276\021P\310\276\254G\255=\002\377i\276\260\337\361\275\222$[>\241\366\233\276KL\222>&=Q>\"V8>\310q/\275\326\301s>\312\022:\276\316\332\000>`\025\320\275\022\232Z>XW\205\276|\255\254=%\202\245>\264j\235=3x\211>u\210\177>\001\345M>KU\360=\010JQ>\036\272\000\2763\336\371<0_\031\275\321\035v\276TV\020>\304?\372=wG\000?\331\245\263\276\216q\211\276\026\224\255\275\264L1>\240d\277>\360z\251<0\362\252<o\370\026\275}\342\343<\234\373\264\276\030&\274\274\002\177\226\2765\312\345\275\220\347T\274#\254\000?\243n.\276\230\010\256>R4\265>\\\222\333=\373\301\200>sw\314\2768\274^=\260\374T\276\035n\266>\205\2062\276\342U\020\276e\025\242\276\324O\032\276\267\341\305>\215\320\255\276\027Y\214>.K\205\276\3104\274\275\362\350\002>\220\004\026\276J\332\246\276\237Jw\276\266\030\277\276\224\371\356=W#\273>\312\032v>X\030:\275u\244D>\236\355\260\276y\023,\275%f\325<+\366\303>\213\004s>\357\260\256\276\000\000\000\000\353f\231>\320\255O\275\000\000\000\000B\032T\276a\256\231>\305\370\225\276\310\354\334<\035j\255>\224\250\210\276\032mv>\275L\276\2763\364\225>b7D>\000\005\220\276\250\321\257\275\350G\247\274<\002\325=\220\246\030\276\246\353\023\276/\333\233>S\346\275>\030\336B=L\307\360=\360\266\234\276\004s\260=\r\r\227\276\375\273\257>4\004p=i\237\210\276Hk\027\276c\"\321>\034\275 \276{\323\n\276\033\377\262;\220Lu\271G\323*\276H\334\r\275\r\332\353>\360\264\231>=2\004?V\332\005>\276\354\376=8D\227=1\371\030>p\250S:\322\212p<\306\320\270>9\375\223\276\004\031\331=Y\\\261>\216s*\276\326\315\030>\333?\204>\331\'\221>_\341\246>\263\360J\276\374N*>`\223l\275f\013\310\274q\003\266\276\331\365\301\276\212\237\'\2763\223\257\2732\202%>\251\325\370\275Y\253\\\276R\\4>\372\362\357>\204\334N=\005\213\337>p\306\326<\010h\005\274\237\364\223\276\002Q`>\214\337\207=\272\240\037>5;t=\007\030\224>\220r`\275.P3\276\200\263\212\275\240\230\037=\357\334=\276\313\336\314>\362.\233\273H\304O=\362s\034\276\354\302\364\274~\211c>\262Cg>\222\261L\276L\221\324=\360\261!\275\237}\272>\317\t\310\276\214\321\323=s\211\270>\3643\316\275\005\272\303> M\266\275\244\213\027\276\007\022\302>\364]\331\275\342\002\205\276\356ln>\250\002\006<Y\013\270\276\0212\317>\345l\233>x#\220\276\004.\325\275\266\031\027>_$\272>dB\277=L\235\207\275\267\364\244\276\346i\n>\240b#=\237\261\357<H\365\217<(\025\242\275\346\341%>O\2120\276\354\317\207=\362\302|>N;\030>\210\201/=\223\277\310>l\244\220=\'\232\261\2767\021\224>\321{\302>9\276\205>\004\376\337\275\300G\246\275\306\255\251\276\225\267\227>\252\004\022\276ei\236>Lzz\276<\302\213\275\020\276\213\276\027\370-\276\222\354Y>:\251\\\276\232\346z>G\324\271>z\220\036>QD\371\276\354b\233>\233F\227==Q\261>\251\215C>xwO\275\204S\342\274VZ,\276\023\374\244>\370\035\323>SI\351>n\214\312\275\207|\205>%\037\\\275\325\363\276>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_2/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
        }
        tensor_content: "\344v\025\276m\375\250\274Lu#<*\232\201\274Q_\"\274\000\000\000\000\'\301#\274\000\000\000\000\000\000\000\000\260I=>\246g\037>\000\022(>\000\000\000\000\376\000)> \0054>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_2/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_2/MatMul"
  input: "dnn/hiddenlayer_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/kernel/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
        tensor_content: "S\321\216>\365\026\030\276\3208,>\035`\217>Ys\020\276\250&a=>\000}\276\200\257X\276d\312\213\276G\231\002\276b5\001>\260\311C>+&\226\275\242f\204\276xJ\021>\354\377\351=)1\222\276\213x\350=\333\032a\2767\033C\276\021pn\276\366h\017\276\377\254\003\276\021l\226>h\326h\276\236+O\276\260\245(>\252\274\207\276L\252X>VE8\276\334\017\264\276\356\333\347\275++\202\276EN,=Uv\231\275\315/\205\276?\210\337\274y\306\262\276v\326%\276k\215G>s\306\347\274`\334\"\276\243Q\205\276\324\237\301<SX\261\276\320\2434\276\302m\037\276\233\326\354=\374\036\261\276\022\376\264\275\236V~\276\20556\276\235\tZ\276YE\226>Z\355\300>>\262\242\275\340_\330=\372\360\202\276\004\241\031>\347\021\320\276\204\356\375=|\030l\276@\310\037=\251S\027\276\024[\252>N\372B\276\025\270\031=\2522\215>\320\234\013>\260\225\214>\2470\004\274| e>$\363\210=\037\036Z\276\375NA\276\254\220\277\275\024\367\213>\350\237l\276H\250\024=$\267\252\274\201\360-\276\3459\250;\361Gp\276\266\3521\2719\365\201>(\201Z>,U\213\275&\324\245>\220+$>@\323\340=Q\340\220>P\344\242\276pz,>l&\202>\270\275\327=\356\265\373\275\\\367<\276\000\000\000\000,e\224\276\213P\332\275\357\225\205>\340\373\\>6\250\234\276\327E[\275`\376\241=\250\270E\275JY?>\0234\375=\305\236t\276e, >\311\026\232\276\360j\334=\\B:>\316[\025>\360\251\265\275(T\375\275\010\313\025=H\016\221\276\351\210z>\271\035\326=\3747\255\276\312\320\231>\377\252\260\276R\263\273\274\370\263\314\275\r\275i\276\211\004\236=\354\217\252\276\016\031\373\275\000\336\206\276\274\354\263\276\333\340\327<\ro\363\275\340\352\204><\025@\276`4\237\275s1B\276\340\251\274=\004\363\351=\234M1>\230I>\275`\363O>\354\017\r>\036s\372=\372\267\272>\377{\342\275\240\n\331=`B\273=L`\274\276\010Y\233\276T\310<>H\322\033><,N>\036\366\226> \301\256>\215y\224\276_\323\252\276\374$\332\275\302\335\375\275\2304\\=TOW>\234\\\254>\032\222\263;\365\253E\276\347\362Q\276\270^\232<\214\204o>\t=\232\276\302\304\202\276&\357\263>_m\217\276\240\373\266\275\204\305\260>\300\250\021>h\2358>\354\244\253=`\001\250=\230\213\300<h\333A>\220\317K\275\221\370e>\200[\243\275\355\362\214\276\002\353\367\274*;\235>\010\014H\275\023\261\210\276<\211\207\275x\276\221=\236\273\254\276b\377\016\2755\322\207\276=|\032<\266.\242>3\273k=\370\352\255=\032\177\375<\377/\202>1xk\275\305\'\200>T\215l\276\346\353\206\276\305JW\276j\210\203>\371\301\235\276\216a\245>O\030\230\276\21042\275\252\332\355\274lN\022<$c\365=\004%\354\275\376x\201>r\220\021\276\224\253\240>\354\327\271=\000\000\000\000\300\252\265>tP\247>\266\253\224>\240\202J>\265.\356<\375{t\276\301=\025\276\224r\225\275\007\330{<H\305\327=\310\204\215\276\277kA\276\006)\000>W\201\314<\3339]\276\024\347K>\267\032\267\276\000\000\000\000\234o\034>p\220\262>\000@\211\275\260\327B=\373\260\213\276\02564\276q\202\036\276:\241\250>\016^h\276\323\307\204\276\324\215\005\276\300\034\255\275~7\263>d\334\240\275\002\320\240>t|\367=\364\027\345\275dJ\030>H+\200\275\005\251\242\276\010K\274<@\261\204>\001%\353\274\320gk>wef\276\"X\332<7\177\265\276\340\323,>\244\373I>\364\320J\276\232\363\357\275\270\316\351=\360\240n>8\030G>j3&\276\270w\324=\2608\323=d\306\242>S\037\034>o\336\376:\234\251\226\276Y\362\251>\027\301-\276\n\033^\276 6e\276\206\321\230\275\270\210\267>\264\310\256>\325J\214\276\000\2545\275\274\326\263>\207N\266>\266<\024=,\276?>M:\214>\025M\272>Tch>\240\377+>\272\031\222>VO\257;\275\253\236=\200&^>\303\272C\276\257\361\026>~yU>\320\033\222>d/\222\275\024*\r>\250\207\326=\301\010\220>\252\244\211>/\276\364=\351\232>\274\313\271\202\276V\271k\275\3361S>\354y\327\275_\336\034>\177\340\017>\306\371\255>\320\347\235=\325\217\240>\"\251n\276p\263\264>$H/>\374Z\276>\256\241\366\275\020!U>\301\335!\275\032f4=\021\275\330\275\355\371A\276*\315\261>\'z\202>\242:\251\2769\374m\276\306\243e\276\205\2750\276\014\023h>\327\304\026\275hT\005\275\320\010\333>\241@\220\275Jth\275F\240\260\275\354\333\344>\374^\263\276U\353\327>\032\274\336=E(\267\2764z\203\276\251?\220<\023\316\377\275\036\010\255\276V\246\336>&\353\254>\0300\277<\351,\240\276\031es=\205\014\220>\\\206\323>Z\335s\276\334C\367=\032\377\326>\033\232i=zNS\276\2520\235>\273\005A\276\202\342\211\276Vo\031\276\226(m\276^\000\202\276\322\263\203\276H#/\2752\242\377\274\324\206\272\275\210\2209<\267\022\236\276,c\231>\246p\254\276\010Kk\274\302\302\226\276X\227\037\275~\235\204>\222\330\263>\036\320\234\276\215>\200\276\013\r\026\276\320\2361\276\277\352c\276\000\000\000\0008J\232>0i\231=\310\245*\275\263\332\362\274\236\301\334=\005\373A\276xI.=\316\367\241\275\307I\032><\360Q>\342>\344>e(S>\210@\244\275\310\260\223>\210^\362>;\2147;@?\230>\014\003#>\334z\252\275\326\234y\276\304\210\237>oc\036\276y\236&\276\310\311\231>\331\261u>\260\275\243\276$\276\232\275\317\327\233\274\344&\305>\3367\317>w\264$\276\3636\203\276\017\271\230\275\366\361T\275\'\365\022>H\251\t>\255V\232\276O\305\377=`\002 \276\023M\375;\315\270\373>\322\017E>\024\313\270\275\315\2026>\367\374\210>\277m#\276\rP\352><\253?<\370\363}=\334\234\\>TB\330>\005`v>\3143\373=\372\2365\275\312NV>\360\241\246\276(\366\257\274\376\271\244>\346\2422\2761\031\024>\3003\244=h\313\\=\343)\035\276\273\305g>"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_3/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/kernel/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_3/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/Relu"
  input: "dnn/hiddenlayer_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/bias/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        tensor_content: "/\217\272\274\000\000\000\000\000\000\000\000\245\374\r>\316\352v:\000\000\000\000\375\000\">\361\0244\275\000\000\000\000]\261\025\275\274&\016>\000\000\000\000$\302\n>g\216\354\275\000\000\000\000\000\000\000\000\330S\020>\027\335{<\000\000\000\000\273\2039>\020\251\023>\000\000\000\000\000\000\000\000o;\031>v\027\r>\364\3160>\000\000\000\000\000\000\000\000\300\227\013>\264Z\366\275"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_3/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/bias/part_0"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_3/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_3/MatMul"
  input: "dnn/hiddenlayer_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
        tensor_content: "ox\267\276\220q\353<i\357\247\276Qq\237>\036\327\177;,\204\004>P\200>>__\'\276\201\274\316\276s\350H\276\"\303\252>\366\257\307>\020\347\365>\357\210\216\276\310\020\336=\330\272g>\356\326\300>\343\355>>\200\215W=f\376\007>\220l\306>\210\013\221>o\255r\276!gG>\234\210\006?\376\317\370=\344\331U>\246\243\253\276Fj\227=\267\356\265\275"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_3/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.125877380371
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
library {
  function {
    signature {
      name: "_make_dataset_B0J2GhZzZlw"
      output_arg {
        name: "repeatdataset"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 20
              }
              dim {
                size: 24
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 20
              }
            }
            tensor_content: "\000\000\000\000\000\200C@\000\000\000\000\000 h@\000\000\000\000\000\300p@\000\000\000\000\000`f@\000\000\000\000\000\000i@\000\000\000\000\000\200Z@\000\000\000\000\000\360w@\000\000\000\000\000\300b@\000\000\000\000\000\300]@\000\000\000\000\000\340d@\000\000\000\000\000`f@\000\000\000\000\000 b@\000\000\000\000\000`l@\000\000\000\000\000\200V@\000\000\000\000\000\000V@\000\000\000\000\000 o@\000\000\000\000\000`d@\000\000\000\000\000@]@\000\000\000\000\000`k@\000\000\000\000\000\000N@"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "TensorSliceDataset/tensors/component_0:output:0"
      input: "TensorSliceDataset/tensors/component_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 24
              }
            }
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 20
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "TensorSliceDataset:handle:0"
      input: "ShuffleDataset/buffer_size:output:0"
      input: "ShuffleDataset/seed:output:0"
      input: "ShuffleDataset/seed2:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 24
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "BatchDataset/batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 5
          }
        }
      }
    }
    node_def {
      name: "BatchDataset"
      op: "BatchDataset"
      input: "ShuffleDataset:handle:0"
      input: "BatchDataset/batch_size:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 24
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "BatchDataset:handle:0"
      input: "RepeatDataset/count:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 24
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    ret {
      key: "repeatdataset"
      value: "RepeatDataset:handle:0"
    }
  }
}
versions {
  min_consumer: 12
}
