module examples.numbers;
import android.content.Intent;
import android.view.Window;
import android.content.ContentResolver;
import android.content.Context;
import android.view.WindowManager.LayoutParams;
import android.provider.Settings;
import androidsalsa.resources.AndroidProxy;
import java.lang.*;
import java.util.*;

behavior Numbers {
   private int brightness;
    private ContentResolver cResolver;
    private Window window;
    private LayoutParams layoutpars;

    public Numbers(){

    }

    void initSetting(){
        cResolver = AndroidProxy.ContentResolverCall();
        window = AndroidProxy.WindowCall();
    }
     void SystemFun(){
        Settings.System.putInt(cResolver,
                Settings.System.SCREEN_BRIGHTNESS_MODE, Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL);
     }
      
     void PrintBright(int val, int tsleep, int bright){
        long time_init;
        try{
        val = bright;
        Settings.System.putInt(cResolver, Settings.System.SCREEN_BRIGHTNESS, val);
        layoutpars = window.getAttributes();
        layoutpars.screenBrightness = val / (float)255;
        window.setAttributes(layoutpars);
        
        } catch (Exception e){
            standardOutput<-println("Thread Sleep Error Test");
        }
        try{
           Thread.sleep(tsleep);
        }catch (Exception e){
           standardOutput<-println("Thread Sleep Error test 0");
       }
      try{
        val = bright;
        Settings.System.putInt(cResolver, Settings.System.SCREEN_BRIGHTNESS, val);
        layoutpars = window.getAttributes();
        layoutpars.screenBrightness = val / (float)255;
        window.setAttributes(layoutpars);
      
       }catch (Exception e){
            standardOutput<-println("Thread Sleep Error Test 1");
       }


     }
     int Bright(){
        try{
         
        return Settings.System.getInt(cResolver,Settings.System.SCREEN_BRIGHTNESS);
         
         }
         catch(Exception e){
           standardOutput<-println("Brightness error");
           return -1;
         }


     } 

    long getDiffTime(long initTime){
        return System.currentTimeMillis() - initTime; 
    }
  
   
    void Dummy(int sleep, int loop, int myargs){

    

    	// Number number = new Number(0);
        long myOld_time = System.currentTimeMillis();
    	
    	long val1 = 0;
    	for (int i = 0; i< loop; i++){
    	    // number<-inc()@currentContinuation;
    		Random randomno = new Random();
        	 val1 = randomno.nextLong();
    	}

    	//standardOutput<-println("Thread 0 first part done");

    	// Adder adder = new Adder(number);
    	// Printer printer = new Printer(number);

    		// for (int i = 0 ; i<5; i++){
    	   	 // adder<-go();
    	   	 // printer<-go();
    		// }
    		long time_init = System.currentTimeMillis();
    		long current_time = 0;
    		long final_time = time_init + sleep;
    		do{
    			current_time = System.currentTimeMillis();
    		}while(final_time > current_time);
    		for (int i = 0; i< loop; i++){
    	    // number<-inc()@currentContinuation;
    		Random randomno = new Random();
        	 val1 = randomno.nextLong();
    	}
        long myDelta_time = System.currentTimeMillis() - myOld_time;
        if(myargs == 0){
        standardOutput<-println("Thread time"+myDelta_time);
        }

		

    }






    void act(String args[]){
	initSetting() @ SystemFun()@ Bright() @ PrintBright(token,Integer.parseInt(args[6]),Integer.parseInt(args[7]));
    Numbers[] actors=new Numbers[Integer.parseInt(args[2])];
    Random actGen = new Random();
    //long old_time =  System.currentTimeMillis();
    standardOutput<-println("Time to sleep "+ args[3]+"State "+args[4])@
    join{
    for(int i = 0; i< actors.length; i++){
        //actors[i] = new Numbers();
        int actorId = actGen.nextInt(2000);
        actors[i]=new Numbers() at (new UAN("uan://osl-server1.cs.illinois.edu:3030"+"/nqchild"+actorId), new UAL("rmsp://"+args[5]+":4040/nqchildloc"+actorId));
        actors[i]<-Dummy(Integer.parseInt(args[1]),Integer.parseInt(args[0]),i);
    }
    } @ standardOutput<-println();
    //join{
      //  long delta_time = System.currentTimeMillis() - old_time;
        //standardOutput<-println("Time to run actors "+ delta_time);
       // for(int i=0 ; i<actors.length; i++){
       //     actors[i] = null;
       // }
    //}@standardOutput<-println();
    }
}
