module examples.exsort;

import image_detection_RSH.Find_Faces_Android;
import image_detection_RSH.Find_Faces_JVM;
import image_detection_RSH.Gray8DetectHaarMultiScale;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.PrintWriter;

import java.util.Collections;

//for Android:
import java.io.FileOutputStream;
import android.app.Activity;
import android.content.Context;
import android.content.ContextWrapper;
import java.io.File;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import android.os.Environment;


behavior ExternalSort{
  static final long serialVersionUID = 3L;

  private Reporter_Actor reporter_actor;
  private boolean        isReporting;
  private Phone_App_Manager phone_app_manager;
  private Vector         input;
  private long           initialTime;              // Starting Time
  private String         input_fileName;           // The name of the file to read in             
  private String         output_fileName;          // The name of the file to write to

  public ExternalSort(Reporter_Actor rep_actor, boolean is_reporting) {   
    phone_app_manager = null;
    reporter_actor = (Reporter_Actor) rep_actor;
    isReporting = is_reporting;
    input = new Vector();
  }


  void start_up(Phone_App_Manager phone_app_manager, String input_fileName, String output_fileName, int iterations){
    this.input_fileName = input_fileName;
    this.output_fileName = output_fileName;    

    initialTime = System.currentTimeMillis();

     this.read_initial_in(input_fileName);
     this.write_read(output_fileName, iterations);
     
     endTimer()@
     phone_app_manager<-wrap_up();
	}

  void write_read(String fileName, int iterations){
     if (iterations>0){
        this.sort();
        this.write_out(fileName);
        this.read_back_in(fileName);
        this.write_read(fileName, iterations-1);
     }
  }

  void sort(){
     this.report("ExternalSort: sort() started");

     Collections.sort(input);

     this.report("ExternalSort: sort() finished");

  }

   /*
   * This method reads in a file that has been placed in the source folder together with project files on BOTH LAPTOP/PHONE:
   * The file will be compiled as part of the project and transferred with it. Usually used for initial reading of the file.
   */
  void read_initial_in(String fileName){
    this.report("ExternalSort: read_in() starteded"); 

    try {
      // InputStream is =this.getClass().getResourceAsStream(fileName);
      InputStream is = ExternalSort.class.getResourceAsStream(fileName);
      BufferedReader in = new BufferedReader(new InputStreamReader(is));  
      if (in==null) { 
            this.report("ExternalSort: [ERROR] Can't find the file "+fileName+" in project folder.");
	    System.err.println("[Custom] The file cannot be found");
      }
      else {
         String line;
         while ((line = in.readLine()) != null) {
           //this.report("ExternalSort: just read: "+line);
           input.add(line);           
         }
         in.close();
      }
    } catch (IOException ioe) {
      this.report("ExternalSort: [ERROR] Can't open the file "+fileName+" for reading.");
    }
    this.report("ExternalSort: read_in() finished");     
  }


  //This method is used to read back in a file that has just been written to disk 
  //it deicides whether running on JVM or Dalvik and acts accordingly
  public void read_back_in(String inputFilename){
      this.report("ExternalSort: read_back_in() started");

      if (isDalvik()) {
          this.read_back_in_Android(inputFilename);
      } else {
          this.read_back_in_Linux(inputFilename);
      }

      this.report("ExternalSort: read_back_in() finished");
  }


  //This method is used to read back in a file that has just been written to disk on Linux
  void read_back_in_Linux(String inputFilename){
    //this.report("ExternalSort: read_back_in_Linux() started");         
     try {
       BufferedReader in = new BufferedReader(new FileReader(inputFilename));
       if (in==null)  
             this.report("ExternalSort: [error] Can't find the file "+ inputFilename);
       else {
          String line;
          while ((line = in.readLine()) != null) {
            //this.report("ExternalSort: just read: "+line);
            input.add(line);
          }
          in.close();
       }
     } catch (Exception ioe) {
      this.report("ExternalSort: [error] Can't open the file "+ inputFilename+" for reading.");
     }
    //this.report("ExternalSort: read_back_in_Linux() finished"); 
  }



  //This method is used to read back in a file that has just been written to disk on Android
  void read_back_in_Android(String inputFilename){
    //this.report("ExternalSort: read_back_in_Android() started"); 
    File inputFile = null;
    File myDir = null;

    try {
        String root = Environment.getExternalStorageDirectory().toString();
        myDir = new File(root + "/output");    
        myDir.mkdirs();
        inputFile = new File (myDir, inputFilename);

        InputStream inputStream = new BufferedInputStream(new FileInputStream(inputFile));
        BufferedReader r = new BufferedReader(new InputStreamReader(inputStream));
        String line;
        while ((line = r.readLine()) != null) {
            //this.report("ExternalSort: just read: "+line);
            input.add(line);
        }
        r.close();
        inputStream.close();
    } catch (Exception e) {
        this.report("ExternalSort: ERROR reading from file "+ myDir+"/"+inputFilename); 
    }
    //this.report("ExternalSort: read_back_in_Android() finished"); 
  }


  //This method is used to write out a file to disk 
  //it deicides whether running on JVM or Dalvik and acts accordingly
  public void write_out(String outputFilename){
      this.report("ExternalSort: write_out() started");

      if (isDalvik()) {
          this.write_out_Android(outputFilename);
      } else {
          this.write_out_Linux(outputFilename);
      }

      this.report("ExternalSort: write_out() finished");
  }


  //This method is used to write out a file to disk on Linux
  void write_out_Linux(String outputFilename){
    //this.report("ExternalSort: write_out_Linux() started");
    try {
      PrintWriter out = new PrintWriter(new FileWriter(outputFilename));
      for (int i = 0; i < input.size(); i++) {
         out.println(input.get(i));
      }      

      input.removeAllElements();
      out.flush();
      out.close();
    } catch (Exception e) {
      this.report("ExternalSort: [error] Can't open/write to file "+outputFilename);
    }  
    //this.report("ExternalSort: write_out_Linux() finished");   
  }



  //This method is used to write out a file to disk on Android
  void write_out_Android(String outputFilename){
    //this.report("ExternalSort: write_out() for Android started"); 
    File outputFile = null;
    File myDir = null;
    try {
        String root = Environment.getExternalStorageDirectory().toString();
        myDir = new File(root + "/output");    
        myDir.mkdirs();
        outputFile = new File (myDir, outputFilename);
        if (outputFile.exists ()) outputFile.delete (); 
        //outputFile.createNewFile();

        PrintWriter out = new PrintWriter(new FileWriter(outputFile));
        for (int i = 0; i < input.size(); i++) {
           out.println(input.get(i));
        }   

        input.removeAllElements();
        out.flush();
        out.close();
    } catch (Exception e) {
        this.report("ExternalSort: ERROR writing to file "+ myDir+"/"+outputFilename); 
    }
    //this.report("ExternalSort: write_out() for Android finished"); 
  }


  private boolean isDalvik(){
    if (System.getProperty("java.vm.name").equalsIgnoreCase("Dalvik"))
       return true;
    else
       return false;
  }

  void endTimer(){
    long finalTime = System.currentTimeMillis();
    long runningTime = finalTime - initialTime;
    this.report("ExternalSort:: Runtime for external sorting is "+runningTime+" ms.");
  }

  void report(String msg){
    if (isReporting)
      reporter_actor <- report( msg );
  }

}
