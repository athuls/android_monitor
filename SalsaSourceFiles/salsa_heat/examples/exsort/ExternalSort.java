package examples.exsort;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import image_detection_RSH.Find_Faces_Android;
import image_detection_RSH.Find_Faces_JVM;
import image_detection_RSH.Gray8DetectHaarMultiScale;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Collections;
import java.io.FileOutputStream;
import android.app.Activity;
import android.content.Context;
import android.content.ContextWrapper;
import java.io.File;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import android.os.Environment;

public class ExternalSort extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		ExternalSort instance = (ExternalSort)new ExternalSort(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new ExternalSort(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return ExternalSort.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new ExternalSort(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return ExternalSort.getReferenceByLocation(new UAL(ual)); }
	public ExternalSort(boolean o, UAN __uan)	{ super(false,__uan); }
	public ExternalSort(boolean o, UAL __ual)	{ super(false,__ual); }
	public ExternalSort(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public ExternalSort(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public ExternalSort(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public ExternalSort()		{  }
	public ExternalSort(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "examples.exsort.ExternalSort", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct (Reporter_Actor rep_actor, boolean is_reporting) {
		Object[] __arguments = { rep_actor, new Boolean(is_reporting) };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public ExternalSort self;
		public void updateSelf(ActorReference actorReference) {
			((ExternalSort)actorReference).setUAL(getUAL());
			((ExternalSort)actorReference).setUAN(getUAN());
			self = new ExternalSort(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "examples.exsort.ExternalSort$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		long serialVersionUID = 3L;
		Reporter_Actor reporter_actor;
		boolean isReporting;
		Phone_App_Manager phone_app_manager;
		Vector input;
		long initialTime;
		String input_fileName;
		String output_fileName;
		public void construct(Reporter_Actor rep_actor, boolean is_reporting){
			phone_app_manager = null;
			reporter_actor = (Reporter_Actor)rep_actor;
			isReporting = is_reporting;
			input = new Vector();
		}
		public void start_up(Phone_App_Manager phone_app_manager, String input_fileName, String output_fileName, int iterations) {
			this.input_fileName = input_fileName;
			this.output_fileName = output_fileName;
			initialTime = System.currentTimeMillis();
			this.read_initial_in(input_fileName);
			this.write_read(output_fileName, iterations);
			{
				Token token_2_0 = new Token();
				// endTimer()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, self, "endTimer", _arguments, null, token_2_0 );
					__messages.add( message );
				}
				// phone_app_manager<-wrap_up()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, phone_app_manager, "wrap_up", _arguments, token_2_0, null );
					__messages.add( message );
				}
			}
		}
		public void write_read(String fileName, int iterations) {
			if (iterations>0) {{
				this.sort();
				this.write_out(fileName);
				this.read_back_in(fileName);
				this.write_read(fileName, iterations-1);
			}
}		}
		public void sort() {
			this.report("ExternalSort: sort() started");
			Collections.sort(input);
			this.report("ExternalSort: sort() finished");
		}
		public void read_initial_in(String fileName) {
			this.report("ExternalSort: read_in() starteded");
			try {
				InputStream is = ExternalSort.class.getResourceAsStream(fileName);
				BufferedReader in = new BufferedReader(new InputStreamReader(is));
				if (in==null) {{
					this.report("ExternalSort: [ERROR] Can't find the file "+fileName+" in project folder.");
					System.err.println("[Custom] The file cannot be found");
				}
}				else {{
					String line;
					while ((line=in.readLine())!=null) {
						input.add(line);
					}
					in.close();
				}
}			}
			catch (IOException ioe) {
				this.report("ExternalSort: [ERROR] Can't open the file "+fileName+" for reading.");
			}

			this.report("ExternalSort: read_in() finished");
		}
		public void read_back_in(String inputFilename) {
			this.report("ExternalSort: read_back_in() started");
			if (isDalvik()) {{
				this.read_back_in_Android(inputFilename);
			}
}			else {{
				this.read_back_in_Linux(inputFilename);
			}
}			this.report("ExternalSort: read_back_in() finished");
		}
		public void read_back_in_Linux(String inputFilename) {
			try {
				BufferedReader in = new BufferedReader(new FileReader(inputFilename));
				if (in==null) {this.report("ExternalSort: [error] Can't find the file "+inputFilename);
}				else {{
					String line;
					while ((line=in.readLine())!=null) {
						input.add(line);
					}
					in.close();
				}
}			}
			catch (Exception ioe) {
				this.report("ExternalSort: [error] Can't open the file "+inputFilename+" for reading.");
			}

		}
		public void read_back_in_Android(String inputFilename) {
			File inputFile = null;
			File myDir = null;
			try {
				String root = Environment.getExternalStorageDirectory().toString();
				myDir = new File(root+"/output");
				myDir.mkdirs();
				inputFile = new File(myDir, inputFilename);
				InputStream inputStream = new BufferedInputStream(new FileInputStream(inputFile));
				BufferedReader r = new BufferedReader(new InputStreamReader(inputStream));
				String line;
				while ((line=r.readLine())!=null) {
					input.add(line);
				}
				r.close();
				inputStream.close();
			}
			catch (Exception e) {
				this.report("ExternalSort: ERROR reading from file "+myDir+"/"+inputFilename);
			}

		}
		public void write_out(String outputFilename) {
			this.report("ExternalSort: write_out() started");
			if (isDalvik()) {{
				this.write_out_Android(outputFilename);
			}
}			else {{
				this.write_out_Linux(outputFilename);
			}
}			this.report("ExternalSort: write_out() finished");
		}
		public void write_out_Linux(String outputFilename) {
			try {
				PrintWriter out = new PrintWriter(new FileWriter(outputFilename));
				for (int i = 0; i<input.size(); i++){
					out.println(input.get(i));
				}
				input.removeAllElements();
				out.flush();
				out.close();
			}
			catch (Exception e) {
				this.report("ExternalSort: [error] Can't open/write to file "+outputFilename);
			}

		}
		public void write_out_Android(String outputFilename) {
			File outputFile = null;
			File myDir = null;
			try {
				String root = Environment.getExternalStorageDirectory().toString();
				myDir = new File(root+"/output");
				myDir.mkdirs();
				outputFile = new File(myDir, outputFilename);
				if (outputFile.exists()) {outputFile.delete();
}				PrintWriter out = new PrintWriter(new FileWriter(outputFile));
				for (int i = 0; i<input.size(); i++){
					out.println(input.get(i));
				}
				input.removeAllElements();
				out.flush();
				out.close();
			}
			catch (Exception e) {
				this.report("ExternalSort: ERROR writing to file "+myDir+"/"+outputFilename);
			}

		}
		private boolean isDalvik() {
			if (System.getProperty("java.vm.name").equalsIgnoreCase("Dalvik")) {			return true;
}			else {			return false;
}		}
		public void endTimer() {
			long finalTime = System.currentTimeMillis();
			long runningTime = finalTime-initialTime;
			this.report("ExternalSort:: Runtime for external sorting is "+runningTime+" ms.");
		}
		public void report(String msg) {
			if (isReporting) {			{
				// reporter_actor<-report(msg)
				{
					Object _arguments[] = { msg };
					Message message = new Message( self, reporter_actor, "report", _arguments, null, null );
					__messages.add( message );
				}
			}
}		}
	}
}